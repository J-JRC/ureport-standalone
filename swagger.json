{
  "swagger": "2.0",
  "info": {
    "description": "",
    "x-explorer-enabled": false,
    "version": "1.0.0",
    "title": "UReport API",
    "termsOfService": "",
    "contact": {
      "email": "ureport@outlook.com"
    }
  },
  "host": "",
  "basePath": "/api",
  "tags": [
    {
      "name": "authentication",
      "description": "Login, logout"
    },
    {
      "name": "user",
      "description": "Users"
    },
    {
      "name": "build",
      "description": "Builds from CI automation execution"
    },
    {
      "name": "test",
      "description": "Tests from each automation execution"
    },
    {
      "name": "testRelation",
      "description": "Tests Relation for each test"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login to server.",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "username",
                "password"
              ],
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Sign up new user",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/user/{page}/{perpage}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Retrive list of builds based on the query",
        "operationId": "pagnition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "page number",
            "required": true,
            "type": "string"
          },
          {
            "name": "perpage",
            "in": "path",
            "description": "Number of users per page, minimum 10, maximum value 50",
            "required": true,
            "type": "string",
            "minimum": 10,
            "maximum": 50
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "username"
              ],
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/user/update/{username}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user information",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test/multi": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Add array of tests",
        "description": "Attach array of tests to existing build. Due to performance/load consideration, the length of array cannot excceed 100 or max of 50 MB in size.",
        "operationId": "addTests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiTests"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test/filter": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Recieve tests from a build or builds",
        "description": "Filter tests based from a specific build or builds. Exclude will filter out unwanted fields from the response",
        "operationId": "filterTests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "build"
              ],
              "properties": {
                "build": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "All",
                      "PASS",
                      "FAIL",
                      "SKIP"
                    ]
                  }
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "_id",
                      "build",
                      "setup",
                      "teardown",
                      "body",
                      "info",
                      "start_time",
                      "end_time"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test_relation/": {
      "post": {
        "tags": [
          "testRelation"
        ],
        "summary": "Create test relation",
        "description": "<strong>How to add custom relation field.</strong><br>\nUReport allows you to add any relations other than those predefined.<br>Simply the key:value pair as the content of customs field. For example, you want label as multiple value and severity as single value.User can provide the following payload<br><code> <pre> \n    customs: {  \n      label: ['regression','smoke']\n      severity: 'Blocker'\n    } </pre> </code>\n",
        "operationId": "createTestRelation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRelation"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test_relation/{page}/{perpage}": {
      "post": {
        "tags": [
          "testRelation"
        ],
        "summary": "Retrive list of test lists",
        "operationId": "pagnitionTestRelation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "page number",
            "required": true,
            "type": "string"
          },
          {
            "name": "perpage",
            "in": "path",
            "description": "Number of test relation per page, minimum 10, maximum value 50",
            "required": true,
            "type": "string",
            "minimum": 10,
            "maximum": 50
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "product",
                "type"
              ],
              "type": "object",
              "properties": {
                "product": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Add a new build or update exist build with provided value.",
        "description": "<ul> <li> If a build already exists, and the status is present in the payload. Status will be added to the existing value instead of overwrite.</li> <li> If a build already exists, and key client is present in the payload. Envrionments and settings will be set to as the value of key client inside environments and settings </li> </ul>\n",
        "operationId": "addBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build/status/calculate/{buildId}": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Caculate or recalculate build status based on the current stored tests using build id",
        "description": "<ul> <li> Users can call this endpoint to calculate the status of execution based on the current existing tests in the database. Users can call this job at the end of the whole automation execution or at any point where a calculated status is needed. </li> <li> The calculation will consider normal and rerun tests</li> <li> Unlike build/status/{buildId} endpoint, it will overwrite the previous status result and update with the latest status reflected by the tests stored in the database at the time</li</ul>",
        "operationId": "endBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "ID of build",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "is_update_build_status": {
                  "type": "boolean",
                  "default": true,
                  "description": "set to True if you want to update the build status"
                }
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "build is not found"
          }
        }
      }
    },
    "/build/status/{buildId}": {
      "put": {
        "tags": [
          "build"
        ],
        "summary": "Update status of existing build using build id.",
        "operationId": "updateStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pass": {
                  "type": "integer"
                },
                "fail": {
                  "type": "integer"
                },
                "skip": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build/{buildId}": {
      "get": {
        "tags": [
          "build"
        ],
        "summary": "Find build by ID",
        "description": "Returns a single build",
        "operationId": "getBuildById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "404": {
            "description": "Build not found"
          }
        }
      },
      "put": {
        "tags": [
          "build"
        ],
        "summary": "Updates a build except its status.",
        "description": "Don't use this api to update status of exist build. Use /build/status/ instead.",
        "operationId": "updateBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build that needs to be updated",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Permission Restriction"
          }
        }
      },
      "delete": {
        "tags": [
          "build"
        ],
        "summary": "Deletes a build and all tests under it",
        "description": "",
        "operationId": "deleteBuild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "Build id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Build not found"
          }
        }
      }
    },
    "/build/filter": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Retrive list of builds based on the query",
        "operationId": "filter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "product",
                "type"
              ],
              "type": "object",
              "properties": {
                "product": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "team": {
                  "type": "string"
                },
                "browser": {
                  "type": "string"
                },
                "device": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "platform_version": {
                  "type": "string"
                },
                "since": {
                  "type": "string",
                  "format": "date"
                },
                "after": {
                  "type": "string",
                  "format": "date"
                },
                "range": {
                  "type": "integer",
                  "default": 5
                },
                "is_archive": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build/{page}/{perpage}": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Retrive list of builds based on the query",
        "operationId": "pagnitionBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "page number",
            "required": true,
            "type": "string"
          },
          {
            "name": "perpage",
            "in": "path",
            "description": "Number of build per page, minimum 10, maximum value 50",
            "required": true,
            "type": "string",
            "minimum": 10,
            "maximum": 50
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "product",
                "type"
              ],
              "type": "object",
              "properties": {
                "product": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "team": {
                  "type": "string"
                },
                "browser": {
                  "type": "string"
                },
                "device": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "platform_version": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "username",
        "password",
        "email",
        "role"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "displayname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "admin",
            "operator",
            "viewer"
          ]
        },
        "password": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "settings": {
          "type": "object",
          "properties": {
            "language": {
              "type": "string",
              "default": "en"
            },
            "theme": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "default": "bootstrap"
                },
                "type": {
                  "type": "string",
                  "default": "light"
                }
              }
            },
            "dashboard": {
              "type": "object",
              "properties": {
                "isShowWidgetBorder": {
                  "type": "boolean",
                  "default": false
                },
                "isExpandMenu": {
                  "type": "boolean",
                  "default": "fals"
                },
                "isWidgetBarOnHover": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "report": {
              "type": "object",
              "properties": {
                "assignmentRI": {
                  "type": "integer",
                  "default": 30
                },
                "displaySelfAN": {
                  "type": "boolean",
                  "default": "fals"
                },
                "displaySearchAndFilterBoxInStep": {
                  "type": "boolean",
                  "default": true
                },
                "status": {
                  "type": "object",
                  "properties": {
                    "pass": {
                      "type": "boolean",
                      "default": false
                    },
                    "rerun": {
                      "type": "boolean",
                      "default": false
                    },
                    "fail": {
                      "type": "boolean",
                      "default": true
                    },
                    "skip": {
                      "type": "boolean",
                      "default": true
                    },
                    "ki": {
                      "type": "boolean",
                      "default": false
                    },
                    "out": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "MultiTests": {
      "type": "object",
      "properties": {
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Test"
          }
        }
      }
    },
    "Test": {
      "type": "object",
      "required": [
        "uid",
        "build",
        "name",
        "status"
      ],
      "properties": {
        "uid": {
          "type": "string",
          "example": "11120 or test.login.component",
          "description": "The UID repesents a uniq id of the test script/case. It is essential that automation developers make sure that the id is mapped to 1 test case, otherwise, it will impact the auto analysis. The UID can be a unique number extracted from the test management tools such as TestRail, or it could be a string that unique enough to represent the test's intention (test name can be used as UID as well)."
        },
        "build": {
          "type": "string",
          "example": "6156f5ad744820091c9305b1",
          "description": "ID of the build. A ID will be returned in the paylaod when creating a build"
        },
        "name": {
          "type": "string",
          "example": "test.login.componet or testMyDashboardCreation",
          "description": "Name of the test script."
        },
        "status": {
          "type": "string",
          "enum": [
            "PASS",
            "FAIL",
            "SKIP"
          ],
          "description": "The status of test run. Note no special status in case of rerun. If a test is a rerun, the is_rerun field needs to be set to True, but the status will still be PASS, FAIL, or SKIP. UReport will take care of the status and display it as rerun from the UI."
        },
        "start_time": {
          "type": "string",
          "default": "Current date and time when record is created in DB",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "failure": {
          "type": "object",
          "default": null,
          "properties": {
            "token": {
              "type": "string",
              "example": "9:27:53:18:56:18:82:70",
              "description": "What is token? well, it can be anything as long as it is unique to represent the problem. What does that mean and why do we need token?\\n First, token is optional if the failure message is clear enough to distinguish among problems happens to the test case in the past. The token is there for the sake of ambiguious error message such as expected false to equal true, You could have a test case has many assertions at different places in the code generate such failure message, or for dymaic value in the assertion such as date. The token is there to indentify the exact failure location which usually used the line number extracted from stack trace. In the give example, these numbers represent the line number provided in the example of the stack trace below. This way, even the same error message from the different line of the test code, UReport will know it is not the same failure."
            },
            "error_message": {
              "type": "string",
              "example": "expected false to equal true"
            },
            "stack_trace": {
              "type": "string",
              "example": "AssertionError: expected false to equal true at Function.expectTrue (Asserter.ts:9:27) at Context.<anonymous> (test.ts:53:18) at Context.executeSync (index.js:56:18) at index.js:82:70"
            }
          }
        },
        "is_rerun": {
          "type": "boolean",
          "default": false,
          "example": true,
          "description": "If set to true, UReport will consider this test as a rerun of previously existing test in the same build."
        },
        "info": {
          "type": "object",
          "description": "Despite of four predefined parameter, all value in info can be any value user wants to store. These value will be displayed in the test detail panel in the analyze execution page.",
          "properties": {
            "description": {
              "type": "string"
            },
            "duration": {
              "type": "string"
            },
            "file": {
              "type": "string",
              "description": "(Optional) The file name of the test script (file extension can be included)"
            },
            "path": {
              "type": "string",
              "description": "(Optional) The relative path of the test script"
            }
          }
        },
        "setup": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PASS",
                  "FAIL",
                  "SKIP",
                  "INFO"
                ]
              },
              "detail": {
                "type": "string"
              },
              "attachment": {
                "type": "object",
                "description": "UReport only supports base64 screenshot at the moment (if you need other format, please contact us)",
                "properties": {
                  "screenshot": {
                    "type": "string",
                    "description": "If Selenium or Appium is used to generate the screenshot, its value can be directly put in the payload since it is already in base64 format"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "base64"
                    ]
                  }
                }
              }
            }
          }
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PASS",
                  "FAIL",
                  "SKIP",
                  "INFO"
                ]
              },
              "detail": {
                "type": "string"
              },
              "attachment": {
                "type": "object",
                "description": "UReport only supports base64 screenshot at the moment (if you need other format, please contact us)",
                "properties": {
                  "screenshot": {
                    "type": "string",
                    "description": "If Selenium or Appium is used to generate the screenshot, its value can be directly put in the payload since it is already in base64 format"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "base64"
                    ]
                  }
                }
              }
            }
          }
        },
        "teardown": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PASS",
                  "FAIL",
                  "SKIP",
                  "INFO"
                ]
              },
              "detail": {
                "type": "string"
              },
              "attachment": {
                "type": "object",
                "description": "UReport only supports base64 screenshot at the moment (if you need other format, please contact us)",
                "properties": {
                  "screenshot": {
                    "type": "string",
                    "description": "If Selenium or Appium is used to generate the screenshot, its value can be directly put in the payload since it is already in base64 format"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "base64"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "TestRelation": {
      "type": "object",
      "required": [
        "uid",
        "product",
        "type"
      ],
      "properties": {
        "uid": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "components": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "customs": {
          "type": "object",
          "properties": {
            "any": {
              "type": "string"
            }
          }
        }
      }
    },
    "Build": {
      "type": "object",
      "required": [
        "product",
        "type",
        "build"
      ],
      "properties": {
        "product": {
          "type": "string",
          "example": "Reporting",
          "description": "The proudct name of the software."
        },
        "type": {
          "type": "string",
          "example": "API or UI or Regression or Smoke",
          "description": "The type of the automation."
        },
        "build": {
          "type": "integer",
          "example": 100,
          "description": "The mandatory field indicate the build number of the execution. Please note that build number is not version/release number of the software. A software could have a version or release that triggers multiple builds"
        },
        "version": {
          "type": "string",
          "example": "1.0.0",
          "description": "The version/release number of the application"
        },
        "team": {
          "type": "string",
          "example": "Team Alpha or Integration Team",
          "description": "The team name of the automation executions belongs to."
        },
        "browser": {
          "type": "string",
          "enum": [
            "Chrome",
            "Firefox",
            "Edge",
            "Safari",
            "Opera",
            "IE",
            "Internet Explorer",
            "Electron"
          ],
          "example": "Chrome",
          "description": "browser is case sensitive for filtering. for example, chrome and Chrome are treated differently to the search engine. (This is only applicable to Web testing involve browser)"
        },
        "device": {
          "type": "string",
          "example": "Windows VM or Pixel 2",
          "description": "the hardware where the automation executed"
        },
        "platform": {
          "type": "string",
          "example": "iOS or Windows",
          "description": "the software platform where the automation is executed. could be the OS system or machine type"
        },
        "platfomr_version": {
          "type": "string",
          "example": "13.0.4 or 10",
          "description": "a platform version if platform is provided"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "type": "string",
          "description": "owner of the execution",
          "example": "admin"
        },
        "is_archive": {
          "type": "boolean",
          "example": "false",
          "description": "Only set this value when you don't want the build to be used in history runs. (Admin can still see acrhived build)"
        },
        "status": {
          "type": "object",
          "description": "status of your automation run",
          "properties": {
            "pass": {
              "type": "integer"
            },
            "fail": {
              "type": "integer"
            },
            "skip": {
              "type": "integer"
            },
            "total": {
              "type": "integer"
            }
          }
        },
        "environments": {
          "type": "object",
          "description": "To hold all environment variables of the automation run. Notice it is a object could holds other object. It is designed for parallel executions where different environments (machines/clients) could be involved during the execution",
          "properties": {
            "default": {
              "type": "object",
              "description": "could be anything you want to save as envrionment",
              "example": {
                "baseUrl": "http:localhost",
                "timeout": 6000,
                "isRetryFailure": false
              }
            }
          }
        },
        "settings": {
          "type": "object",
          "description": "To hold all settings variables of the automation run. Notice it is a object could holds other object. It is designed for parallel executions where different settings could be involved during the execution",
          "properties": {
            "default": {
              "type": "object",
              "description": "could be anything you want to save as setting",
              "example": {
                "baseUrl": "http:localhost",
                "timeout": 6000,
                "isRetryFailure": false
              }
            }
          }
        },
        "client": {
          "type": "string",
          "example": "VM-01",
          "description": "if client is detected in the payload, all settings and environments value will be saved as the name of the client instead of default."
        }
      }
    }
  }
}