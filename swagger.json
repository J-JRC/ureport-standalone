{
  "swagger": "2.0",
  "info": {
    "description": "Start to push your automation data to UReport. Happy analyzing",
    "x-explorer-enabled": false,
    "version": "1.0.0",
    "title": "UReport API",
    "termsOfService": "",
    "contact": {
      "email": "ureport@outlook.com"
    }
  },
  "host": "localhost:4200",
  "basePath": "/api/",
  "tags": [
    {
      "name": "authentication",
      "description": "Login, logout"
    },
    {
      "name": "user",
      "description": "Users"
    },
    {
      "name": "build",
      "description": "Builds from CI automation execution"
    },
    {
      "name": "test",
      "description": "Tests from each automation execution"
    },
    {
      "name": "testRelation",
      "description": "Tests Relation for each test"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login to server.",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "username",
                "password"
              ],
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Sing up new user",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successfully"
          }
        }
      }
    },
    "/user/{page}/{perpage}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Retrive list of builds based on the query",
        "operationId": "pagnition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "page number",
            "required": true,
            "type": "string"
          },
          {
            "name": "perpage",
            "in": "path",
            "description": "Number of users per page, minimum 10, maximum value 50",
            "required": true,
            "type": "string",
            "minimum": 10,
            "maximum": 50
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "username"
              ],
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/user/update/{username}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user information",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test/multi": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Add array of tests",
        "description": "Attach array of tests to existing build. Due to performance/load consideration, the length of array cannot excceed 100 or max of 50 MB in size.",
        "operationId": "addTests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MutltiTests"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test/filter": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Recieve tests from a build or builds",
        "description": "Filter tests based from a specific build or builds. Exclude will filter out unwanted fields from the response",
        "operationId": "filterTests",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "build"
              ],
              "properties": {
                "build": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "All",
                      "PASS",
                      "FAIL",
                      "SKIP"
                    ]
                  }
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "_id",
                      "build",
                      "setup",
                      "teardown",
                      "body",
                      "info",
                      "start_time",
                      "end_time"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test_relation/": {
      "post": {
        "tags": [
          "testRelation"
        ],
        "summary": "Create test relation",
        "description": "<strong>How to add custom relation field.</strong><br>\nUReport allows you to add any relations other than those predefined.\nSimply the key:value pair as the content of customs field\nFor example, you want label as multiple value and severity as single value. You can provide the following payload\n<code><pre> \ncustoms: { \n  label: ['regression','smoke']\n  severity: 'Blocker'\n}\n</pre></cod3>\"\n",
        "operationId": "createTestRelation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRelation"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/test_relation/{page}/{perpage}": {
      "post": {
        "tags": [
          "testRelation"
        ],
        "summary": "Retrive list of test lists",
        "operationId": "pagnitionTestRelation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "page number",
            "required": true,
            "type": "string"
          },
          {
            "name": "perpage",
            "in": "path",
            "description": "Number of test relation per page, minimum 10, maximum value 50",
            "required": true,
            "type": "string",
            "minimum": 10,
            "maximum": 50
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "product",
                "type"
              ],
              "type": "object",
              "properties": {
                "product": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Add a new build or update exist build with provided value.",
        "description": " <ul> <li> If a build already exists, and the status is present in the payload. Status will be added to the existing value instead of overwrite.</li> <li> If a build already exists, and key client is present in the payload. Envrionments and settings will be set to as the value of key client inside environments and settings </li> </ul>\n",
        "operationId": "addBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build/status/{buildId}": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Update status of existing build using its id.",
        "operationId": "updateStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pass": {
                  "type": "integer"
                },
                "fail": {
                  "type": "integer"
                },
                "skip": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build/{buildId}": {
      "get": {
        "tags": [
          "build"
        ],
        "summary": "Find build by ID",
        "description": "Returns a single build",
        "operationId": "getBuildById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "404": {
            "description": "Build not found"
          }
        }
      },
      "put": {
        "tags": [
          "build"
        ],
        "summary": "Updates a build except its status.",
        "description": "Don't use this api to update status of exist build. Use /build/status/ instead.",
        "operationId": "updateBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build that needs to be updated",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "403": {
            "description": "Permission Restriction"
          }
        }
      },
      "delete": {
        "tags": [
          "build"
        ],
        "summary": "Deletes a build and all tests under it",
        "description": "",
        "operationId": "deleteBuild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "Build id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Build not found"
          }
        }
      }
    },
    "/build/filter": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Retrive list of builds based on the query",
        "operationId": "filter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "product",
                "type"
              ],
              "type": "object",
              "properties": {
                "product": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "team": {
                  "type": "string"
                },
                "browser": {
                  "type": "string"
                },
                "device": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "platform_version": {
                  "type": "string"
                },
                "since": {
                  "type": "string",
                  "format": "date"
                },
                "after": {
                  "type": "string",
                  "format": "date"
                },
                "range": {
                  "type": "integer",
                  "default": 5
                },
                "is_archive": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    },
    "/build/{page}/{perpage}": {
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Retrive list of builds based on the query",
        "operationId": "pagnitionBuild",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "page number",
            "required": true,
            "type": "string"
          },
          {
            "name": "perpage",
            "in": "path",
            "description": "Number of build per page, minimum 10, maximum value 50",
            "required": true,
            "type": "string",
            "minimum": 10,
            "maximum": 50
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "product",
                "type"
              ],
              "type": "object",
              "properties": {
                "product": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "team": {
                  "type": "string"
                },
                "browser": {
                  "type": "string"
                },
                "device": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "platform_version": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "xxx is mandatory"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "username",
        "password",
        "email",
        "role"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "displayname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "admin",
            "operator",
            "viewer"
          ]
        },
        "password": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "settings": {
          "type": "object",
          "properties": {
            "language": {
              "type": "string",
              "default": "en"
            },
            "theme": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "default": "bootstrap"
                },
                "type": {
                  "type": "string",
                  "default": "light"
                }
              }
            },
            "dashboard": {
              "type": "object",
              "properties": {
                "isShowWidgetBorder": {
                  "type": "boolean",
                  "default": false
                },
                "isExpandMenu": {
                  "type": "boolean",
                  "default": "fals"
                },
                "isWidgetBarOnHover": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "report": {
              "type": "object",
              "properties": {
                "assignmentRI": {
                  "type": "integer",
                  "default": 30
                },
                "displaySelfAN": {
                  "type": "boolean",
                  "default": "fals"
                },
                "displaySearchAndFilterBoxInStep": {
                  "type": "boolean",
                  "default": true
                },
                "status": {
                  "type": "object",
                  "properties": {
                    "pass": {
                      "type": "boolean",
                      "default": false
                    },
                    "rerun": {
                      "type": "boolean",
                      "default": false
                    },
                    "fail": {
                      "type": "boolean",
                      "default": true
                    },
                    "skip": {
                      "type": "boolean",
                      "default": true
                    },
                    "ki": {
                      "type": "boolean",
                      "default": false
                    },
                    "out": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "MutltiTests": {
      "type": "object",
      "properties": {
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Test"
          }
        }
      }
    },
    "Test": {
      "type": "object",
      "required": [
        "uid",
        "name",
        "status"
      ],
      "properties": {
        "uid": {
          "type": "string"
        },
        "build": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "PASS",
            "FAIL",
            "SKIP"
          ]
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "failure": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            },
            "error_message": {
              "type": "string"
            },
            "stack_trace": {
              "type": "string"
            }
          }
        },
        "is_rerun": {
          "type": "boolean"
        },
        "info": {
          "type": "object",
          "description": "Despite of four predefined parameter, all value in info can be any value user wants to store. These value will be displayed in the test detail panel in the execution page.",
          "properties": {
            "description": {
              "type": "string"
            },
            "duration": {
              "type": "string"
            },
            "file": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          }
        },
        "setup": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PASS",
                  "FAIL",
                  "SKIP",
                  "INFO"
                ]
              },
              "detail": {
                "type": "string"
              },
              "attachment": {
                "type": "object",
                "properties": {
                  "screenshot": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "base64"
                    ]
                  }
                }
              }
            }
          }
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PASS",
                  "FAIL",
                  "SKIP",
                  "INFO"
                ]
              },
              "detail": {
                "type": "string"
              },
              "attachment": {
                "type": "object",
                "properties": {
                  "screenshot": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "base64"
                    ]
                  }
                }
              }
            }
          }
        },
        "teardown": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PASS",
                  "FAIL",
                  "SKIP",
                  "INFO"
                ]
              },
              "detail": {
                "type": "string"
              },
              "attachment": {
                "type": "object",
                "properties": {
                  "screenshot": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "base64"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "TestRelation": {
      "type": "object",
      "required": [
        "uid",
        "product",
        "type"
      ],
      "properties": {
        "uid": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "components": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "customs": {
          "type": "object",
          "properties": {
            "any": {
              "type": "string"
            }
          }
        }
      }
    },
    "Build": {
      "type": "object",
      "required": [
        "product",
        "type",
        "build"
      ],
      "properties": {
        "product": {
          "type": "string",
          "example": "Reporting"
        },
        "type": {
          "type": "string",
          "example": "API"
        },
        "version": {
          "type": "string",
          "example": "1.0.0"
        },
        "team": {
          "type": "string",
          "example": "Team Alpha"
        },
        "build": {
          "type": "integer",
          "example": 100
        },
        "browser": {
          "type": "string",
          "enum": [
            "Chrome",
            "Firefox",
            "Edge",
            "Safari",
            "Opera",
            "IE",
            "Internet Explorer"
          ],
          "example": "Chrome",
          "description": "browser is case sensitive for filtering. for example, chrome and Chrome are treated differently to the search engine"
        },
        "device": {
          "type": "string",
          "example": "Windows VM"
        },
        "platform": {
          "type": "string",
          "example": "iOS"
        },
        "platfomr_version": {
          "type": "string",
          "example": "13.0.4"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "type": "string"
        },
        "is_archive": {
          "type": "boolean",
          "example": "false",
          "description": "Only set this value when you don't want the build to be seen"
        },
        "status": {
          "type": "object",
          "description": "status of your automation run",
          "properties": {
            "pass": {
              "type": "integer"
            },
            "fail": {
              "type": "integer"
            },
            "skip": {
              "type": "integer"
            },
            "total": {
              "type": "integer"
            }
          }
        },
        "environments": {
          "type": "object",
          "description": "To hold all environment variables of the automation run. Notice it is a object could holds other object. It is designed for parallel executions where different environments (machines/clients) could be involved during the execution",
          "properties": {
            "default": {
              "type": "object",
              "description": "could be anything you want to save as envrionment"
            }
          }
        },
        "settings": {
          "type": "object",
          "description": "To hold all settings variables of the automation run. Notice it is a object could holds other object. It is designed for parallel executions where different settings could be involved during the execution",
          "properties": {
            "default": {
              "type": "object",
              "description": "could be anything you want to save as envrionment"
            }
          }
        },
        "client": {
          "type": "string",
          "example": "VM-01",
          "description": "if client is detected in the payload, all settings and environments value will be saved as the name of the client instead of default."
        }
      }
    }
  }
}